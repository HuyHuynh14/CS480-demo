{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red14\green14\blue14;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c6667\c6667\c6667;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
Assignment 5\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs26 \cf2 \cb3 This is an individual assignment. The purpose of this assignment is helping you gain proficiency programming hash functions, stacks, and queues.\cb1 \
\pard\pardeftab720\partightenfactor0

\b \cf2 \cb3 To complete this assignment you will perform the following exercises:
\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs28\fsmilli14300 \cf2 \cb3 Exercise 1\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs26 \cf2 \cb3 You are to implement 
\b 2
\b0  different hash tables, with different hashing functions. All of them should implement the following interface:\cb1 \
\
public interface HashTable<String,V> \{\
\
  public void add(String key, V value);\
\
  public V remove(String key);\
\
  public V lookup(String key);\
\
  public Object[] getValuesList();\
\
  public void printReport();\
\
\}\
\
\cb3 The printReport() method should print to the console the following statistics:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The 
\b Load Fator
\b0 , that is, the ratio of used to total number of buckets.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The 
\b longest chain
\b0  in the table, that is, the 
\b maximum number of collisions
\b0  for a particular bucket.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The 
\b Density Factor
\b0 , that is, the ratio of elements stored elements to total number of buckets.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The 
\b Chanining Factor
\b0 , that is, the average length of any chain in the table.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The 2 types of hashing functions you are to implement are:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\b \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Additive Hashing
\b0 \cb1 \
\ls2\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
XOR-Shift (Rotational) Hashing
\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The hash tables should implement resizing and rehashing. The 
\b V[] getSortedList(V[] list)
\b0  method should return a sorted list with all the elements in the array.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs28\fsmilli14300 \cf2 \cb3 Exercise 2\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs26 \cf2 \cb3 You will use a stack and a queue to implement a scambled version of the rotational hashing function. Before applying the rotational hash to the string, you will implement a function that will scramble the characters in the string so that every 3 successive characters in the string are inverted. For example, if the string to be hashed is "Jonathan", then the function should turn the string into "noJhtana" before applying the rotational hash. This function can be easily implemented using a stack and a queue.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs28\fsmilli14300 \cf2 \cb3 Exercise 3\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs26 \cf2 \cb3 Now that you've implemented the hash tables you will use to implement a ver simple registry for students' records. You will create a class to keep student's information: name, student ID, and grade. The program will have the following functionality:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The record is persistent, that is, the whole registry should be saved on file upon exiting the program, and after any major change.\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The program should provide the option to create a new entry with a student's name, ID, and grade.\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
There should be an option to lookup a student from his student ID (this will be the key in the hash table).\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
There should be an option to remove a particular entry by providing the student ID.\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
There should be an option to display the whole registry, sorted by student ID.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Remember that the registry must be persistent, so you will have to save all this information to the file system. You may use any of the versions of hash tables implemented in the previous exercise.}